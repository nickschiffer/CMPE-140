# $a0 = array base address
# $a1 = n
# $s0 = n!

Main:
        addi $a0, $0, 0x100      # array base address = 0x100
        addi $a1, $0, 0	         # i = 0
        addi $t0, $0, 3
        addi $t1, $0, 50         # $t1 = 50


CreateArray_Loop:
        slt  $t2, $a1, $t1	 # i < 50?
        beq  $t2, $0,  Exit_Loop # if not then exit loop
        sll  $t2, $a1, 2	 # $t2 = i * 4 (byte offset)
        add  $t2, $t2, $a0	 # address of array[i]
        mult $a1, $t0
        mflo $t3		 # $t3 = i * 3
        sw   $t3, 0($t2)	 # save array[i]
        addi $a1, $a1, 1         # i = i + 1
        j    CreateArray_Loop

Exit_Loop:     
        # arithmetic calculation 
        
        lw    $t1, 100($a0)     #t1 = my_array[25]
        lw    $t2, 120($a0)     #t2 = my_array[30]
        addu  $t1, $t1, $t2     	#t1 = my_array[25] + my_array[30]
        addiu $t2, $zero, 30 
        divu  $t1, $t2          #(my_array[25] + my_array[30])/30
        mflo  $a1               # a1 = (my_array[25] + my_array[30])/30
        sw    $a1, 0($zero)     # store n at 0x00
        
        
        jal factorial           # call procedure     
        add $s0, $v0, $0        # return value
        sw  $s0, 0x10($zero)    # store n! in 0x10
        j   main                # reset

factorial:
	# factorial computation     
	addi $sp, $sp, -8       # make room on the stack     
	sw   $a1, 4($sp)        # store $a1     
	sw   $ra, 0($sp)        # store $ra
	slti $t0, $a1, 2        # a1 <= 1 ? 
	beq  $t0, $zero, else   # no: go to else (recursion)
	addi $v0, $zero, 1      # yes: return 1
	addi $sp, $sp, 8        # restore sp
	jr   $ra                # return
else:
        addi $a1, $a1, -1       # n -= 1
        jal  factorial          # recursive call
        lw   $ra, 0($sp)        # restore $ra
        lw   $a1, 4($sp)        # restore $a1
        addi $sp, $sp, 8        # restore $sp
        mult $v0, $a1           # n * factorial(n-1)
        mflo $v0
	jr   $ra                # return
